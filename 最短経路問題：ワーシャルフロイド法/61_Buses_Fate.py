"""
高橋君は、バスがあまり好きではありません。ですが、社会に出ると、バスを乗るという行為を避けることはできません。
社会人になると、自宅から会社まで、バスで通わなければなりません。高橋君はまだ内定を貰っていないので、会社の場所は解りません。
高橋君は、バスに乗っている時間が最も長くなってしまうような、最悪のケースを常に想定します。 この、最悪なケースのバスに乗っている時間が、出来るだけ短くなるような場所に引っ越そうと思っています。
追記：なお、最悪のケースとは、バスに乗る時間の合計が最も短くなるように、乗るバスを選択した時に、最もバスに乗る時間の合計が長くなってしまうような位置に会社があるケースのことを指します。
また、自宅から会社に行く際に、高橋君が乗るバスを選ぶことができ、高橋君はバスに乗る時間の合計が最も短い経路を選択するものとします。
各バスは、2 つのバス停を往復するように走っており、行き・帰りでかかる時間に差はありません。 バスにはいつでも乗ることが可能であり、乗継にかかる時間などは無視することが可能です。
また、自宅や会社はバス停に隣接しており、他のバス停まで歩いたり、バス以外の手段で移動することはできません。
高橋君が引っ越すべき場所を求め、そこに引っ越した際の、バスに乗らなければならない時間の最大値を出力してください。
"""
N, M = map(int, input().split())
INF = float('inf')

G = [[INF] * N for _ in range(N)]
for n in range(N):
    G[n][n] = 0
    
for m in range(M):
    a, b, t = map(int, input().split())
    G[a-1][b-1] = t
    G[b-1][a-1] = t
    
"""
確認
for line in G:
    print(line)
"""
   
# ワーシャルフロイド法 
for i in range(N): # 中継地
    for j in range(N): # 始点
        for k in range(N): # 終点
            G[j][k] = min(G[j][k], G[j][i] + G[i][k])
            
ans = []
for g in range(N):
    max_num = max(G[g])
    ans.append(max_num)
    
print(min(ans))
