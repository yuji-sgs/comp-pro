"""
JOI くんと IOI ちゃんは双子の兄妹である。JOI くんは最近お菓子作りに凝っていて，今日も JOI くんはケーキを焼いて食べようとしたのだが，焼きあがったところで匂いをかぎつけた IOI ちゃんが来たので 
2 人でケーキを分けることになった．
ケーキは円形である．ある点から放射状に切り目を入れ，ケーキを N 個のピースに切り分け，ピースに 1 から N まで反時計回りに番号をつけた．
つまり, 1≦i≦N に対し, i 番目のピースは i-1 番目と i+1 番目のピースと隣接している (ただし 0 番目は N 番目, N+1 番目は 1 番目とみなす). 
i 番目のピースの大きさはAiだったが, 切り方がとても下手だったので Aiはすべて異なる値になった. 

この N 個を JOI くんと IOI ちゃんで分けることにした．分け方は次のようにすることにした：
1. まず JOI くんが N 個のうちの好きな 1 つを選んで取る．
2. その後, IOI ちゃんからはじめて IOI ちゃんと JOI くんが交互に残りのピースを 1 つずつ取っていく. ただし, 両隣のピースのうち少なくとも一方が既に取られているようなピースしか取ることができず, 取れるピースが複数あるときは, IOI ちゃんはそのうち最も大きいものを選んで取り, JOI くんはそのうちで好きなものを選んで取ることができる．
JOI くんは，自分が最終的に取るピースの大きさの合計を最大化したい．
ケーキのピースの数 N と， N 個のピースの大きさの情報が与えられたとき, JOI くんが取れるピースの大きさの合計の最大値を求めるプログラムを作成せよ．
"""
N = int(input())
A = [int(input()) for _ in range(N)]
A += A    # 2回繰り返す(ケーキが円形であり、一番最後のピースと一番最初のピースが隣接していることを表現するため)
 
# dp[s]: 残りピースがsから始まるときの JOI君の最大得点．長さを1から順に大きくする．
#        初期値は長さ l=0 の場合
dp = [0 for _ in range(N+1)]
 
for l in range(1, N+1):  # 残りピースの個数．1から順にnまで増やす
    player = (N - l) % 2 # どちらのターンか．0: JOI君, 1: IOIちゃん
    if player == 0:     # JOI君
        dp_left = [A[s] + dp[s+1] for s in range(N)] # 左端を取ったときの得点
        dp_right = [dp[s] + A[s+l-1] for s in range(N)]
        dp = [max(dp_left[s], dp_right[s]) for s in range(N)]
    else:               # IOIちゃん
        dp = [dp[s+1] if A[s] > A[s+l-1] else dp[s] for s in range(N)]
    dp.append(dp[0])   # s=n-1のときに，dp[s+1]を利用できるようにする
 
print(max(dp))
